// backend/controllers/vulnerabilityController.js

const scannerService = require('../services/scannerService');
const logger = require('../utils/logger');

// Controller to handle retrieving vulnerabilities and scanning
exports.getAllVulnerabilities = async (req, res) => {
  const dummyVulnerabilities = [
    { id: '1', title: 'Dummy Vulnerability 1', severity: 'High' },
    { id: '2', title: 'Dummy Vulnerability 2', severity: 'Low' },
    { id: '3', title: 'Dummy Vulnerability 3', severity: 'Moderate' }
  ];

  // Se viene passato il parametro "q", filtra per titolo
  const { q } = req.query;
  let results = dummyVulnerabilities;
  if (q) {
    results = results.filter((vuln) =>
      vuln.title.toLowerCase().includes(q.toLowerCase())
    );
  }
  res.json({ vulnerabilities: results });
};

exports.scan = async (req, res) => {
  try {
    const [auditResults, retireResults] = await Promise.all([
      scannerService.scanProject(),
      scannerService.scanRetire()
    ]);
    res.json({
      npmAudit: auditResults,
      retireJS: retireResults
    });
  } catch (error) {
    logger.error(`Scan error: ${error.message}`);
    res.status(500).json({ error: error.message });
  }
};

// New function: returns a dummy vulnerability by id
exports.getVulnerabilityById = (req, res) => {
  const { id } = req.params;
  // For demonstration, return dummy vulnerability data
  const vulnerability = {
    id,
    title: `Dummy Vulnerability ${id}`,
    severity: 'High',
    description: 'This is a dummy vulnerability used for demonstration purposes.'
  };
  res.json(vulnerability);
};
